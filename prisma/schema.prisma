// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Example {
  id String @id @default(cuid())
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  bio         String?  @db.Text
  username    String?   @unique
  phoneNumber String?
  jobTitle    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  bulbs       Int      @default(0)
  followers   Int      @default(0)
  following   Int      @default(0)
  smiles      Int      @default(0)
  coverImg    String?  @db.Text
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  Like          Like[]


  @@unique([id, email])
  @@index([id])
}

// model Profile {
//   userEmail   String   @unique
//   userId      String
//   user        User     @relation(fields: [userId, userEmail], references: [id, email], onDelete: Cascade)


//   @@id([userId, username])
  
// }

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id              String   @id @default(cuid())
  title           String   @db.Text
  text            String   @db.Text
  creator         User     @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId       String
  // To return `Date`s intact through the API we need to add data transformers
  // https://trpc.io/docs/data-transformers
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now()) @updatedAt
  likes           Like[]
  backgroundColor String?

  @@index([creatorId])
}

model Like {
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId    String
  userId    String
  createdAt DateTime @default(now())

  @@id([postId, userId])
  @@index([postId, userId])
}
